version: 2.1

orbs:
  python: circleci/python@2.1.1

jobs:
  build_doc:
    executor: python/default
    steps:
      - restore_cache:
          name: Restore .git
          keys:
            - source-cache-graphs
      - checkout
      - run:
          name: Complete checkout
          command: |
            if ! git remote -v | grep upstream; then
              git remote add upstream https://github.com/py-why/pywhy-graphs.git
            fi
            git remote set-url upstream https://github.com/py-why/pywhy-graphs.git
            git fetch upstream
      - save_cache:
          name: Save .git
          key: source-cache-graphs
          paths:
            - ".git"
      - run:
          name: Check-skip
          command: |
            set -e
            export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
            if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$COMMIT_MESSAGE" == *"[skip circle]"* ]] || [[ "$COMMIT_MESSAGE" == *"[circle skip]"* ]]); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi
      - run:
          name: Merge with upstream
          command: |
            echo $(git log -1 --pretty=%B) | tee gitlog.txt
            echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
            if [[ $(cat merge.txt) != "" ]]; then
              echo "Merging $(cat merge.txt)";
              git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
            fi
      - run:
          name: Install the latest version of Poetry
          command: |
            curl -sSL https://install.python-poetry.org | python3 - --version 1.5.0
            poetry --version
      - run:
          name: Set BASH_ENV
          command: |
            set -e
            sudo apt update
            sudo apt install -qq graphviz optipng libxft2 graphviz-dev
            echo "set -e" >> $BASH_ENV
            echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
            echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
            echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
            echo "export DISPLAY=:99" >> $BASH_ENV
            echo "BASH_ENV:"
            cat $BASH_ENV
      - run:
          name: Install pysal dependencies
          command: |
            sudo apt install libspatialindex-dev xdg-utils
      - run:
          name: Setup pandoc
          command: sudo apt update && sudo apt install -y pandoc optipng
      - run:
          name: Setup Python Packages
          command: |
            poetry install --with docs
      # - python/install-packages:
      #     pkg-manager: poetry
      #     cache-version: "v1" # change to clear cache
      #     args: "--with docs"
      - run:
          name: Check poetry package versions
          command: |
            poetry --version
            poetry show
      - run:
          name: Check installation
          command: |
            poetry run python -c "import pywhy_graphs;"
            poetry run python -c "import numpy; numpy.show_config()"
            LIBGL_DEBUG=verbose poetry run python -c "import matplotlib.pyplot as plt; plt.figure()"
      - run:
          name: Build documentation
          command: |
            cd docs
            poetry run poe build_docs
      # Save the example test results
      - store_test_results:
          path: docs/_build/test-results
      - store_artifacts:
          path: docs/_build/test-results
          destination: test-results
      # Save the SG RST
      - store_artifacts:
          path: docs/auto_examples.zip
      - store_artifacts:
          path: docs/generated.zip
      # Save the outputs
      - store_artifacts:
          path: docs/_build/html/
          destination: dev
      - store_artifacts:
          path: docs/_build/html_stable/
          destination: stable
      - persist_to_workspace:
          root: docs/_build
          paths:
            - html
            - html_stable

  linkcheck:
    parameters:
      scheduled:
        type: string
        default: "false"
    executor: python/default
    steps:
      - restore_cache:
          keys:
            - source-cache-graphs
      - checkout
      - run:
          name: Check-skip
          command: |
            export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
            if [[ "$COMMIT_MESSAGE" != *"[circle linkcheck]"* ]] && [ "<< parameters.scheduled >>" != "true" ]; then
              echo "Skip detected, exiting job ${CIRCLE_JOB}."
              circleci-agent step halt;
            fi
      - run:
          name: Set BASH_ENV
          command: |
            set -e
            sudo apt update
            sudo apt install -qq graphviz optipng libxft2 graphviz-dev
            echo "set -e" >> $BASH_ENV
            echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
            echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
            echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
            echo "export DISPLAY=:99" >> $BASH_ENV
            echo "BASH_ENV:"
            cat $BASH_ENV
      - python/install-packages:
          pkg-manager: poetry
          cache-version: "v1" # change to clear cache
          args: "--with docs"
      - run:
          name: make linkcheck
          command: |
            poetry run make -C docs linkcheck
      - run:
          name: make linkcheck-grep
          when: always
          command: |
            poetry run make -C docs linkcheck-grep
      - store_artifacts:
          path: docs/_build/linkcheck
          destination: linkcheck

  deploy:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout

      - attach_workspace:
          at: docs/_build
      - run:
          name: Set BASH_ENV
          command: |
            set -e
            echo "set -e" >> $BASH_ENV
      # Don't try to deploy if nothing is there or not on the right branch
      - run:
          name: Check docs
          command: |
            if [ ! -f docs/_build/html/index.html ] && [ ! -f docs/_build/html_stable/index.html ]; then
              echo "No files found to upload (build: ${CIRCLE_BRANCH}).";
              circleci-agent step halt;
            fi;
      - run:
          name: Install and configure dependencies
          # do not update gh-pages above 3.0.0
          # see: https://github.com/tschaub/gh-pages/issues/354
          command: |
            npm install gh-pages@3.0
            git config --global user.email "circle@pywhy.com"
            git config --global user.name "Circle Ci"
      - add_ssh_keys:
          fingerprints:
            - "07:99:5d:9a:6c:a6:cf:22:ec:90:cf:1c:21:f2:22:4c"
      - run:
          # push built doc into the `dev` directory on the `gh-pages` branch
          name: Deploy doc to gh-pages branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "Deploying dev doc for ${CIRCLE_BRANCH}.";
              node_modules/gh-pages/bin/gh-pages.js --dotfiles --message "doc updates [skip ci]" --dist docs/_build/html --dest ./dev
            else
              echo "Deploying stable doc for ${CIRCLE_BRANCH}.";
              node_modules/gh-pages/bin/gh-pages.js --dotfiles --message "doc updates [skip ci]" --dist docs/_build/html_stable --dest ./stable
            fi;

workflows:
  default:
    jobs:
      - build_doc:
          name: build_doc
      - linkcheck:
          name: linkcheck
      - deploy:
          requires:
            - build_doc
          filters:
            branches:
              only:
                - main

  main:
    jobs:
      - build_doc:
          name: build_doc_main
      - deploy:
          name: deploy_main
          requires:
            - build_doc_main
    triggers:
      - schedule:
          # "At 00:00" (once a day) should be enough "0 0 * * *",
          # But for testing at first, let's do once an hour (6 AM GMT)
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main

  weekly:
    jobs:
      - linkcheck:
          name: linkcheck_weekly
          scheduled: "true"
    triggers:
      - schedule:
          # "At 00:00 on Sunday" should be often enough
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - main
