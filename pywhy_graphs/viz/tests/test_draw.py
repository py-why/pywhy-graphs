import re

import networkx as nx

from pywhy_graphs import CPDAG, PAG, StationaryTimeSeriesDiGraph
from pywhy_graphs.viz import draw, timeseries_layout


def test_draw_pos_is_fully_given():
    """
    Ensure the Graphviz pos="x,y!" attribute is generated by the draw function
    when pos is given for all nodes.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "x")])
    # create a graph layout manually
    pos = {"x": [0, 0], "y": [1, 0], "z": [0.5, 0.7]}
    # draw the graphs
    dot = draw(graph, pos=pos)
    # get the graph description in textual form
    dot_body_text = "".join(dot.body)
    # assert that the produced graph contains the right pos argument for all nodes
    assert re.search(r"\tx \[.* pos=\"0,0!\"", dot_body_text) is not None
    assert re.search(r"\ty \[.* pos=\"1,0!\"", dot_body_text) is not None
    assert re.search(r"\tz \[.* pos=\"0.5,0.7!\"", dot_body_text) is not None


def test_draw_pos_is_partially_given():
    """
    Ensure the Graphviz pos="x,y!" attribute is generated by the draw function
    when pos is given for some nodes but not all.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "x")])
    # create a graph layout manually
    pos = {"x": [0, 0], "y": [1, 0]}
    # draw the graphs
    dot = draw(graph, pos=pos)
    # get the graph description in textual form
    dot_body_text = "".join(dot.body)
    # assert that the produced graph contains the right pos argument for nodes x and y but not for z
    assert re.search(r"\tx \[.* pos=\"0,0!\"", dot_body_text) is not None
    assert re.search(r"\ty \[.* pos=\"1,0!\"", dot_body_text) is not None
    assert "pos=" not in re.search(r"\tz \[(.*)\]", dot_body_text).groups()[0]


def test_draw_pos_is_not_given():
    """
    Ensure the Graphviz pos="x,y!" attribute is not generated by the draw function
    when pos is not given.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "x")])
    # draw the graphs
    dot = draw(graph)
    # get the graph description in textual form
    dot_body_text = "".join(dot.body)
    # assert that the produced graph does not contain any pos argument for the nodes
    assert "pos=" not in dot_body_text


def test_draw_pos_contains_more_nodes():
    """
    Ensure the Graphviz pos="x,y!" attribute is generated by the draw function
    when pos is given for some nodes but not all.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "x")])
    # create a graph layout manually
    pos = {"x": [0, 0], "y": [1, 0], "t": [1, 2], "w": [3, 4]}
    # draw the graphs
    dot = draw(graph, pos=pos)
    # get the graph description in textual form
    dot_body_text = "".join(dot.body)
    # assert that the produced graph contains the right pos argument for nodes x and y but not for z
    assert re.search(r"\tx \[.* pos=\"0,0!\"", dot_body_text) is not None
    assert re.search(r"\ty \[.* pos=\"1,0!\"", dot_body_text) is not None
    assert "pos=" not in re.search(r"\tz \[(.*)\]", dot_body_text).groups()[0]


def test_draw_pos_with_pag():
    """
    Ensure the Graphviz pos="x,y!" attribute is generated by the draw function
    when pos is given for some nodes but not all.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = PAG([("x", "y"), ("z", "y"), ("z", "x")])
    graph.add_edge("y", "x", graph.circle_edge_name)
    # create a graph layout manually
    pos = {"x": [0, 0], "y": [1, 0], "t": [1, 2], "w": [3, 4]}
    # draw the graphs
    dot = draw(graph, pos=pos)
    # get the graph description in textual form
    dot_body_text = "".join(dot.body)
    # assert that the produced graph contains the right pos argument for nodes x and y but not for z
    assert re.search(r"\tx \[.* pos=\"0,0!\"", dot_body_text) is not None
    assert re.search(r"\ty \[.* pos=\"1,0!\"", dot_body_text) is not None
    assert "pos=" not in re.search(r"\tz \[(.*)\]", dot_body_text).groups()[0]


def test_draw_with_ts_layout():
    G = StationaryTimeSeriesDiGraph()
    G.add_edges_from([(("x", -1), ("x", 0)), (("x", -1), ("y", 0)), (("z", -1), ("y", 0))])

    pos_G = timeseries_layout(G, variable_order=["x", "y", "z"], scale=10)

    assert all(node in pos_G for node in G.nodes)


def test_draw_name_is_given():
    """
    Ensure the generated graph contains the label provided by the user.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "x")])
    # draw the graphs
    dot = draw(graph, name="test")
    # assert that the produced graph contains a label
    assert "label=test" in dot.source


def test_draw_name_is_not_given():
    """
    Ensure the generated graph does not contain a label.
    """
    # create a dummy graph x --> y <-- z and z --> x
    graph = nx.DiGraph([("x", "y"), ("z", "y"), ("z", "x")])
    # draw the graphs
    dot = draw(graph)
    # assert that the produced graph does not contain a label
    assert "label=" not in dot.source


def test_draw_cpdag():
    """Regression test to make sure CPDAG draws correctly."""
    cpdag = CPDAG()

    cpdag.add_edge("xy", "x", cpdag.directed_edge_name)
    cpdag.add_edge("x", "z", cpdag.directed_edge_name)
    cpdag.add_edge("z", "w", cpdag.directed_edge_name)
    cpdag.add_edge("w", "xy", cpdag.undirected_edge_name)

    dot_graph = draw(cpdag, name="bug")
    assert "xy -> z" not in str(dot_graph)
    assert "xy -> x" in str(dot_graph)
