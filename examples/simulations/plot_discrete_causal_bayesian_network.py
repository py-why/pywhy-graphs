"""
.. _ex-discrete-cbn:

=============================================================
Discrete Causal Bayesian Networks and Simulated Discrete Data
=============================================================

Discrete data arises commonly in many applications. For example, data is typically stored
in a table, which categorizes values into discrete values representing certain categories.
In survey data, answers are typically multiple choice. In medical settings, many symptoms
are rated on a scale of for example 1-5. Perhaps a data feature indicates whether or not a
certain disease is present or not, resulting in a binary variable.

Even if these are discrete, the data is still generated by some unknown structural causal model,
which induces a causal diagram. Causal algorithms will typically need to generate different
causal models and then datasets with varying sample sizes to evaluate the algorithms.

In this example, we illustrate how to generate discrete data from a random causal graph.

For information on generating continuous data from a causal graph, one can see
:ref:`ex-linear-gaussian-graph`.
"""

# %%
# Import the required libraries
# -----------------------------
import networkx as nx
from pgmpy.factors.discrete.CPD import TabularCPD

from pywhy_graphs.functional import sample_from_graph
from pywhy_graphs.functional.discrete import make_random_discrete_graph
from pywhy_graphs.viz import draw


# define a helper function to print the full CPD
def print_full(cpd):
    backup = TabularCPD._truncate_strtable
    TabularCPD._truncate_strtable = lambda self, x: x
    print(cpd)
    TabularCPD._truncate_strtable = backup


# %%
# Construct the causal graph
# --------------------------
# In order to generate the data, we start from a causal graph that informs us how
# data is generated. That is, each variable is a function of its exogenous noise distribution
# and its parent values.
edge_list = [
    ("A", "B"),
    ("B", "C"),
    ("C", "D"),
    ("B", "D"),
    ("X", "A"),
    ("X", "C"),
    ("C", "W"),
]
G = nx.DiGraph()

G.add_edges_from(edge_list)

draw(G)

# %%
# Define functional relationships on the graph
# --------------------------------------------
# In order to generate data, we need to define the full functional relationship
# between every node and its parents and also how to generate parent-less nodes.
# We leverage the :class:`pgmpy.factors.discrete.CPD.TabularCPD` abstraction to
# represent conditional probability distributions as tables.

cardinality_lims = {node: [2, 4] for node in G.nodes}
weight_lims = {node: [1, 100] for node in G.nodes}
noise_ratio_lims = {node: [0.1, 0.1] for node in G.nodes}
seed = 1234

G = make_random_discrete_graph(
    G,
    cardinality_lims=cardinality_lims,
    weight_lims=weight_lims,
    noise_ratio_lims=noise_ratio_lims,
    random_state=seed,
    overwrite=True,
)

print(G)

# we can extract the conditional probability table for each node, which is a function of its parents
node_dict = G.nodes["C"]

# We see that each node is fully defined given a conditional probability table, stored as a node
# attribute under the keyword 'cpd'. For more information on the CPD object, see
# pgmpy's documentation on :class:`pgmpy.factors.discrete.CPD.TabularCPD`. Note this
# is in contrast with what node attributes are required in general for simulating data
# from a causal graph in pywhy-graphs.
print_full(node_dict["cpd"])

# %%
# Sample data from the graph
# --------------------------
# Now, we can sample data from the graph that is generated according to the causal diagram.
# This data can be used for instance to evaluate causal discovery algorithms from
# :mod:`dodiscover`, or causal estimation algorithms from :mod:`dowhy`.

# now we sample from the graph the discrete dataset
df = sample_from_graph(G, n_samples=2000, n_jobs=1, random_state=seed)

print(df.head())
